buildscript {
    apply from: "$rootProject.projectDir/versions.gradle"

    repositories {
        google()
        mavenCentral()
        maven { url "https://plugins.gradle.org/m2/" }
        maven { url "https://jitpack.io" }
    }

    dependencies {
        classpath "com.android.tools.build:gradle:$versions.gradle"
        classpath "com.diffplug.spotless:spotless-plugin-gradle:$versions.spotless"
        classpath "com.google.dagger:hilt-android-gradle-plugin:$versions.hilt"
        classpath "io.gitlab.arturbosch.detekt:detekt-gradle-plugin:$versions.detekt"
        classpath "org.jetbrains.dokka:dokka-gradle-plugin:$versions.dokka"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$versions.kotlin"
        classpath "org.jlleitschuh.gradle:ktlint-gradle:$versions.ktlint"
    }
}

allprojects {
    apply from: "$rootProject.projectDir/versions.gradle"

    repositories {
        google()
        mavenCentral()
        maven { url "https://jitpack.io" }
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}

subprojects {
    apply plugin: "io.gitlab.arturbosch.detekt"
    detekt {
        toolVersion = versions.detekt
        config = files("$rootDir/detekt.yml")
        buildUponDefaultConfig = true
        reports.html.enabled = true
    }
    dependencies {
        detektPlugins "io.gitlab.arturbosch.detekt:detekt-formatting:$versions.detekt"
    }

    apply plugin: "org.jetbrains.dokka"
    tasks.named("dokkaHtml") {
        outputDirectory.set(new File("${rootProject.rootDir}/docs/api"))
        dokkaSourceSets {
            configureEach {
                includeNonPublic.set(false)
                skipEmptyPackages.set(true)
                reportUndocumented.set(true)
                noAndroidSdkLink.set(false)
            }
        }
    }

    apply plugin: "org.jlleitschuh.gradle.ktlint"
    ktlint {
        disabledRules = ["no-wildcard-imports"]
    }

    apply plugin: "com.diffplug.spotless"
    spotless {
        format 'misc', {
            target '**/*.gradle', '**/*.md', '**/.gitignore', '**/.pro'
            indentWithSpaces()
            trimTrailingWhitespace()
            endWithNewline()
        }
        kotlin {
            ktlint()
            indentWithSpaces()
            trimTrailingWhitespace()
            endWithNewline()
        }
        json {
            target '**/*.json'
            simple()
        }
    }

    tasks.withType(Test) {
        testLogging {
            exceptionFormat 'FULL'
            showCauses true
            showExceptions true
            showStackTraces true
        }
    }
}
